// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  isActive   Boolean
  imageUrl  String?
  description String?   
  
  products  Product[]  

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    
  slug          String    @unique
  description   String?
  imageUrl      String?
  barcode       String?
  isActive      Boolean
  productPrice  Float
  tags          String[]
   
  
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId 

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

enum UserRole {
  USER
  ADMIN
  VENDOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  products   Product[]
  location      Location?
  
  vendorProfile   VendorProfile?
  role           UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VendorProfile{
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  vendorName String
  phone      String
  email       String?
  vendorAddress String
  location      Location @relation(fields: [locationId], references: [id])
  locationId    String @db.ObjectId @unique
  profileImageUrl   String?
  notes       String?
  isActive    Boolean

  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique 

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Location {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique
  vendorProfile VendorProfile?
  vendorProfileId String @db.ObjectId
}

model Account {
id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id])
}

model Session {
id       String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String    @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id])
}




















// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model Category {
//    id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   title      String 
//   slug       String @unique
//   isActive   Boolean
//   imageUrl  String?
//   description String?   
  
//   products  Product[]  

//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }

// model Product {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   title         String    
//   slug          String    @unique
//   description   String?
//   imageUrl      String?
//   barcode       String?
//   isActive      Boolean
//   productPrice  Float
//   tags          String[]
   
  
//   category   Category  @relation(fields: [categoryId], references: [id])
//   categoryId String @db.ObjectId

//   user   User @relation(fields: [userId], references: [id])
//   userId String  @db.ObjectId 

//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime? @updatedAt
// }

// enum UserRole {
//   USER
//   ADMIN
//   VENDOR
// }

// model User {
//   id            String    @id @default(auto()) @map("_id") @db.ObjectId
//   name          String?
//   email         String?   @unique
//   password      String
//   emailVerified DateTime?
//   products   Product[]
  
//   vendorProfile   VendorProfile?
//   role           UserRole  @default(USER)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   accounts      Account[]
//   sessions      Session[]
// }

// model VendorProfile{
//    id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   vendorName String
//   phone      String
//   email       String?
//   vendorAddress String
//   profileImageUrl   String?
//   notes       String?
//   isActive    Boolean

//   user   User @relation(fields: [userId], references: [id])
//   userId String @db.ObjectId @unique 

//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime? @updatedAt
// }


// model Account {
// id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   user               User      @relation(fields: [userId], references: [id])
// }

// model Session {
// id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String    @unique
//   userId       String @db.ObjectId
//   expires      DateTime
//   user         User      @relation(fields: [userId], references: [id])
// }